@page "/user"
@using APILibrary
@using BlazorWeb.Services
@using BlazorWeb.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>
@if (_loginErrorVisible) {
    <div class="alert alert-danger">Invalid username or password.</div>
}
<EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="loginUsername">Username:</label>
        <InputText id="loginUsername" @bind-Value="_loginModel.Username" class="@GetLoginCssClass(_loginErrorVisible)"/>
        <ValidationMessage For="@(() => _loginModel.Username)"/>
    </div>

    <div class="form-group">
        <label for="loginPassword">Password:</label>
        <InputText id="loginPassword" @bind-Value="_loginModel.Password" type="password" class="@GetLoginCssClass(_loginErrorVisible)"/>
        <ValidationMessage For="@(() => _loginModel.Password)"/>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<h3>Sign Up</h3>
<EditForm Model="_signupModel" OnValidSubmit="HandleSignUp">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="signupUsername">Username:</label>
        <InputText id="signupUsername" @bind-Value="_signupModel.Username"/>
        <ValidationMessage For="@(() => _signupModel.Username)"/>
    </div>

    <div class="form-group">
        <label for="signupPassword">Password:</label>
        <InputText id="signupPassword" @bind-Value="_signupModel.Password" type="password"/>
        <ValidationMessage For="@(() => _signupModel.Password)"/>
    </div>

    <div class="form-group">
        <label for="signupEmail">Email:</label>
        <InputText id="signupEmail" @bind-Value="_signupModel.Email"/>
        <ValidationMessage For="@(() => _signupModel.Email)"/>
    </div>

    <button type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>

@code {
    private UserDto _loginModel = new();
    private UserDto _signupModel = new();
    private bool _loginErrorVisible;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    private async Task HandleLogin() {
        try {
            var authProvider = (SimpleAuthProvider)AuthProvider;
            await authProvider.LoginASync(_loginModel.Username, _loginModel.Password);
            Console.WriteLine("Login successful.");
            _loginErrorVisible = false;
            NavigationManager.NavigateTo("/");
        }
        catch (Exception) {
            _loginErrorVisible = true;
        }
    }

    private async Task HandleSignUp() {
        try {
            var user = await UserService.AddAsync(_signupModel);
            Console.WriteLine($"Sign up successful. User ID: {user.Id}");
            // TODO...
        }
        catch (Exception ex) {
            Console.WriteLine($"Sign up failed: {ex.Message}");
        }
    }

    private static string GetLoginCssClass(bool loginError) {
        return loginError ? "form-control is-invalid" : "form-control";
    }
}